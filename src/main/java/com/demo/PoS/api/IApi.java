/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.demo.PoS.api;

import com.demo.PoS.api.dto.Discount;
import com.demo.PoS.api.dto.Login;
import com.demo.PoS.api.dto.NewReservation;
import com.demo.PoS.api.dto.Order;
import com.demo.PoS.api.dto.OrderList;
import com.demo.PoS.api.dto.Payment;
import com.demo.PoS.api.dto.PaymentList;
import com.demo.PoS.api.dto.Product;
import com.demo.PoS.api.dto.ProductList;
import com.demo.PoS.api.dto.Receipt;
import com.demo.PoS.api.dto.Reservation;
import com.demo.PoS.api.dto.ReservationList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-07T23:27:22.493057110+02:00[Europe/Vilnius]")
@Validated
@Tag(name = "Products", description = "Endpoints For The Product Management Microservice.")
public interface IApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/products : Add A Product
     * Add a product with the given object information in  the request body.
     *
     * @param product Product object (required)
     * @return Successfully Performed Action (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "addProduct",
        summary = "Add A Product",
        description = "Add a product with the given object information in  the request body.",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Product> addProduct(
        @Parameter(name = "Product", description = "Product object", required = true) @Valid @RequestBody Product product
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 4.59, \"name\" : \"greek salad\", \"description\" : \"a salad from Greece\", \"id\" : 10, \"stock\" : 12 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/products/{productId}/restock : Increase Stock Levels For A Product
     * Edit a product with the given object information in  the request body.
     *
     * @param productId ID of product to edit (required)
     * @param body Product object (required)
     * @return Successful Operation. (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "addProductStock",
        summary = "Increase Stock Levels For A Product",
        description = "Edit a product with the given object information in  the request body.",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/products/{productId}/restock",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> addProductStock(
        @Parameter(name = "productId", description = "ID of product to edit", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId,
        @Parameter(name = "body", description = "Product object", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/reservations : Add A Reservation
     * Create a reservation with the given object information in  the request body.
     *
     * @param newReservation Reservation object (required)
     * @return Successfully Performed Action (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "addReservation",
        summary = "Add A Reservation",
        description = "Create a reservation with the given object information in  the request body.",
        tags = { "Reservations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Reservation.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/reservations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Reservation> addReservation(
        @Parameter(name = "NewReservation", description = "Reservation object", required = true) @Valid @RequestBody NewReservation newReservation
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reservationId\" : 12345, \"creationTime\" : \"2023-08-25T00:00:00.000+00:00\", \"orderId\" : 12345, \"startTime\" : \"2023-08-25T00:00:00.000+00:00\", \"endTime\" : \"2023-08-25T00:00:00.000+00:00\", \"lastUpdateTime\" : \"2023-08-25T00:00:00.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/orders/{orderId}/cancel : Cancel An Order
     * Cancel an order with the provided Id. This also calls the Payment API to refund the payment, if it has already been made. 
     *
     * @param orderId ID of order to edit (required)
     * @return Successful Operation. (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "cancelOrder",
        summary = "Cancel An Order",
        description = "Cancel an order with the provided Id. This also calls the Payment API to refund the payment, if it has already been made. ",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/orders/{orderId}/cancel"
    )
    
    default ResponseEntity<Void> cancelOrder(
        @Parameter(name = "orderId", description = "ID of order to edit", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/orders : Create An Order
     * Create an order with the given object information  in the request body.
     *
     * @param order Order object (required)
     * @return Successfully Performed Action (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "createOrder",
        summary = "Create An Order",
        description = "Create an order with the given object information  in the request body.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Order> createOrder(
        @Parameter(name = "Order", description = "Order object", required = true) @Valid @RequestBody Order order
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerId\" : 1987, \"discountAmount\" : 10.5, \"employeeId\" : 7662, \"itemIdList\" : [ 0, 0 ], \"discountType\" : \"percentage\", \"tippingAmount\" : 5.23, \"id\" : 10, \"status\" : \"created\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/payments : Execute A New Payment.
     * Executes A Flow That Covers The \&quot;Pay\&quot; Action.
     *
     * @param payment Payment object that needs to be created. (optional)
     * @return Successful Operation. (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "createPayment",
        summary = "Execute A New Payment.",
        description = "Executes A Flow That Covers The \"Pay\" Action.",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/payments",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createPayment(
        @Parameter(name = "Payment", description = "Payment object that needs to be created.") @Valid @RequestBody(required = false) Payment payment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/products/{productId} : Delete A Product
     * Delete a product by the given ID.
     *
     * @param productId ID of product to delete (required)
     * @return Successful Operation. (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete A Product",
        description = "Delete a product by the given ID.",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/products/{productId}"
    )
    
    default ResponseEntity<Void> deleteProduct(
        @Parameter(name = "productId", description = "ID of product to delete", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/reservations/{reservationId} : Delete/Cancel A Reservation
     * Delete a reservation by the given ID.
     *
     * @param reservationId ID of reservation to delete (required)
     * @return Successful Operation. (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "deleteReservation",
        summary = "Delete/Cancel A Reservation",
        description = "Delete a reservation by the given ID.",
        tags = { "Reservations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/reservations/{reservationId}"
    )
    
    default ResponseEntity<Void> deleteReservation(
        @Parameter(name = "reservationId", description = "ID of reservation to delete", required = true, in = ParameterIn.PATH) @PathVariable("reservationId") Long reservationId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/orders/{orderId}/discount : Get Order Discount
     * Get the discount for an order.
     *
     * @param orderId ID of order to get discount (required)
     * @return Successfully Performed Action (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "discount",
        summary = "Get Order Discount",
        description = "Get the discount for an order.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Discount.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/orders/{orderId}/discount",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Discount> discount(
        @Parameter(name = "orderId", description = "ID of order to get discount", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"discountAmount\" : 10.5, \"discountType\" : \"percentage\", \"order_id\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/orders/{orderId} : Edit An Order
     * Edit an order with the given information in the  request body. It is also responsible for completing  and cancelling the order.
     *
     * @param orderId ID of order to edit (required)
     * @param order Order object (required)
     * @return Successfully Performed Action (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "editOrder",
        summary = "Edit An Order",
        description = "Edit an order with the given information in the  request body. It is also responsible for completing  and cancelling the order.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/orders/{orderId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Order> editOrder(
        @Parameter(name = "orderId", description = "ID of order to edit", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId,
        @Parameter(name = "Order", description = "Order object", required = true) @Valid @RequestBody Order order
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerId\" : 1987, \"discountAmount\" : 10.5, \"employeeId\" : 7662, \"itemIdList\" : [ 0, 0 ], \"discountType\" : \"percentage\", \"tippingAmount\" : 5.23, \"id\" : 10, \"status\" : \"created\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/payments/{paymentId} : Edit Payment Information
     * Edit the details of a single payment.
     *
     * @param paymentId ID of the payment (required)
     * @param payment Payment information that needs to be created. (required)
     * @return Successfully Performed Action (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "editPayment",
        summary = "Edit Payment Information",
        description = "Edit the details of a single payment.",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/payments/{paymentId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Payment> editPayment(
        @Parameter(name = "paymentId", description = "ID of the payment", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") Long paymentId,
        @Parameter(name = "Payment", description = "Payment information that needs to be created.", required = true) @Valid @RequestBody Payment payment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 11111, \"customerId\" : 22222, \"orderId\" : 33333, \"amount\" : 10.5, \"description\" : \"This is a description. \nIt is optional, but can be used to note \nanything of importance. \", \"createdAt\" : \"2001-09-11\", \"paymentType\" : \"bankCard\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/products/{productId} : Edit A Product
     * Edit a product with the given object information in  the request body.
     *
     * @param productId ID of product to edit (required)
     * @param product Product object (required)
     * @return Successful Operation. (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "editProduct",
        summary = "Edit A Product",
        description = "Edit a product with the given object information in  the request body.",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/products/{productId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> editProduct(
        @Parameter(name = "productId", description = "ID of product to edit", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId,
        @Parameter(name = "Product", description = "Product object", required = true) @Valid @RequestBody Product product
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/reservations/{reservationId} : Edit A Reservation
     * Edit a reservation with the given object information in  the request body.
     *
     * @param reservationId ID of reservation to edit (required)
     * @param reservation Reservation object (required)
     * @return Successful Operation. (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "editReservation",
        summary = "Edit A Reservation",
        description = "Edit a reservation with the given object information in  the request body.",
        tags = { "Reservations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/reservations/{reservationId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> editReservation(
        @Parameter(name = "reservationId", description = "ID of reservation to edit", required = true, in = ParameterIn.PATH) @PathVariable("reservationId") Long reservationId,
        @Parameter(name = "Reservation", description = "Reservation object", required = true) @Valid @RequestBody Reservation reservation
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/orders/{orderId} : Get An Order By ID
     * Get an order object by the given ID.
     *
     * @param orderId ID of order to get (required)
     * @return Successfully Performed Action (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getOrderById",
        summary = "Get An Order By ID",
        description = "Get an order object by the given ID.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/orders/{orderId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Order> getOrderById(
        @Parameter(name = "orderId", description = "ID of order to get", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerId\" : 1987, \"discountAmount\" : 10.5, \"employeeId\" : 7662, \"itemIdList\" : [ 0, 0 ], \"discountType\" : \"percentage\", \"tippingAmount\" : 5.23, \"id\" : 10, \"status\" : \"created\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/orders : Get A List Of Orders
     * Get a list of current orders
     *
     * @param count Amount of objects per page (max 200) (optional, default to 50)
     * @param page Page number (optional, default to 1)
     * @param filter Filter Query (optional)
     * @param sort Sorting Order (optional)
     * @return Successfully Performed Action (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getOrders",
        summary = "Get A List Of Orders",
        description = "Get a list of current orders",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/orders",
        produces = { "application/json" }
    )
    
    default ResponseEntity<OrderList> getOrders(
        @Min(1L) @Max(200L) @Parameter(name = "count", description = "Amount of objects per page (max 200)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false, defaultValue = "50") Long count,
        @Min(1L) @Parameter(name = "page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Long page,
        @Parameter(name = "filter", description = "Filter Query", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "sort", description = "Sorting Order", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orders\" : [ { \"id\" : 11111, \"customerId\" : 22222, \"employeeId\" : 33333, \"itemIdList\" : [ 123, 234, 345 ], \"tippingAmount\" : 2.5, \"status\" : \"paid\" }, { \"id\" : 11111, \"customerId\" : 22222, \"employeeId\" : 33333, \"itemIdList\" : [ 123, 234, 345 ], \"tippingAmount\" : 2.5, \"status\" : \"paid\" }, { \"id\" : 11111, \"customerId\" : 22222, \"employeeId\" : 33333, \"itemIdList\" : [ 123, 234, 345 ], \"tippingAmount\" : 2.5, \"status\" : \"paid\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/payments/{paymentId} : Get Payment
     * Get detailed information about a payment.
     *
     * @param paymentId ID of the payment (required)
     * @return Successfully Performed Action (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getPayment",
        summary = "Get Payment",
        description = "Get detailed information about a payment.",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/payments/{paymentId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Payment> getPayment(
        @Parameter(name = "paymentId", description = "ID of the payment", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") Long paymentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 11111, \"customerId\" : 22222, \"orderId\" : 33333, \"amount\" : 10.5, \"description\" : \"This is a description. \nIt is optional, but can be used to note \nanything of importance. \", \"createdAt\" : \"2001-09-11\", \"paymentType\" : \"bankCard\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/payments : Get List Of Payments
     * Get a List of Payments
     *
     * @param count Amount of objects per page (max 200) (optional, default to 50)
     * @param page Page number (optional, default to 1)
     * @param filter Filter Query (optional)
     * @param sort Sorting Order (optional)
     * @return Successfully Performed Action (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getPayments",
        summary = "Get List Of Payments",
        description = "Get a List of Payments",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/payments",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PaymentList> getPayments(
        @Min(1L) @Max(200L) @Parameter(name = "count", description = "Amount of objects per page (max 200)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false, defaultValue = "50") Long count,
        @Min(1L) @Parameter(name = "page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Long page,
        @Parameter(name = "filter", description = "Filter Query", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "sort", description = "Sorting Order", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"payments\" : [ { \"id\" : 11111, \"customerId\" : 22222, \"orderId\" : 33333, \"amount\" : 10.5, \"description\" : \"This is a description. \nIt is optional, but can be used to note \nanything of importance. \", \"createdAt\" : \"2001-09-11\", \"paymentType\" : \"bankCard\" }, { \"id\" : 11111, \"customerId\" : 22222, \"orderId\" : 33333, \"amount\" : 10.5, \"description\" : \"This is a description. \nIt is optional, but can be used to note \nanything of importance. \", \"createdAt\" : \"2001-09-11\", \"paymentType\" : \"bankCard\" }, { \"id\" : 11111, \"customerId\" : 22222, \"orderId\" : 33333, \"amount\" : 10.5, \"description\" : \"This is a description. \nIt is optional, but can be used to note \nanything of importance. \", \"createdAt\" : \"2001-09-11\", \"paymentType\" : \"bankCard\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/products/{productId} : Get A Product By ID
     * Get a product object by the given ID.
     *
     * @param productId ID of product to get (required)
     * @return Successful Operation. (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Get A Product By ID",
        description = "Get a product object by the given ID.",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/products/{productId}"
    )
    
    default ResponseEntity<Void> getProductById(
        @Parameter(name = "productId", description = "ID of product to get", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/products : Get A List Of Products
     * Get a list of current products
     *
     * @param count Amount of objects per page (max 200) (optional, default to 50)
     * @param page Page number (optional, default to 1)
     * @param filter Filter Query (optional)
     * @param sort Sorting Order (optional)
     * @return Successfully Performed Action (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getProductList",
        summary = "Get A List Of Products",
        description = "Get a list of current products",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/products",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProductList> getProductList(
        @Min(1L) @Max(200L) @Parameter(name = "count", description = "Amount of objects per page (max 200)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false, defaultValue = "50") Long count,
        @Min(1L) @Parameter(name = "page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Long page,
        @Parameter(name = "filter", description = "Filter Query", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "sort", description = "Sorting Order", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"products\" : [ { \"id\" : 11111, \"name\" : \"Banana\", \"description\" : \"This is a Banana\", \"price\" : 12.5, \"stock\" : 10 }, { \"id\" : 11112, \"name\" : \"Apple\", \"description\" : \"This is an Apple\", \"price\" : 12.5, \"stock\" : 10 }, { \"id\" : 11112, \"name\" : \"Pear\", \"description\" : \"This is a Pear\", \"price\" : 12.5, \"stock\" : 10 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/orders/{orderId}/receipt : Get Receipt
     * Get detailed information about a receipt.
     *
     * @param orderId ID of the receipt (required)
     * @return Successfully Performed Action (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getReceipt",
        summary = "Get Receipt",
        description = "Get detailed information about a receipt.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Receipt.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/orders/{orderId}/receipt",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Receipt> getReceipt(
        @Parameter(name = "orderId", description = "ID of the receipt", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : 22222, \"receiptString\" : \"This order costs 12$ \\nPaid by credit card.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/reservations/{reservationId} : Get A Reservation By ID
     * Get a reservation object by the given ID.
     *
     * @param reservationId ID of reservation to get (required)
     * @return Successful Operation. (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getReservationById",
        summary = "Get A Reservation By ID",
        description = "Get a reservation object by the given ID.",
        tags = { "Reservations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/reservations/{reservationId}"
    )
    
    default ResponseEntity<Void> getReservationById(
        @Parameter(name = "reservationId", description = "ID of reservation to get", required = true, in = ParameterIn.PATH) @PathVariable("reservationId") Long reservationId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/reservations : Get A List Of Reservations
     * Get a list of current reservations
     *
     * @param count Amount of objects per page (max 200) (optional, default to 50)
     * @param page Page number (optional, default to 1)
     * @param filter Filter Query (optional)
     * @param sort Sorting Order (optional)
     * @return Successfully Performed Action (status code 200)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getReservationList",
        summary = "Get A List Of Reservations",
        description = "Get a list of current reservations",
        tags = { "Reservations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Performed Action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReservationList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/reservations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ReservationList> getReservationList(
        @Min(1L) @Max(200L) @Parameter(name = "count", description = "Amount of objects per page (max 200)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false, defaultValue = "50") Long count,
        @Min(1L) @Parameter(name = "page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Long page,
        @Parameter(name = "filter", description = "Filter Query", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "sort", description = "Sorting Order", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reservations\" : [ { \"reservationId\" : 11111, \"orderId\" : 22222, \"startTime\" : \"2023-08-25\", \"endTime\" : \"2023-08-25\", \"creationTime\" : \"2023-08-25\", \"lastUpdateTime\" : \"2023-08-25\" }, { \"reservationId\" : 11111, \"orderId\" : 22222, \"startTime\" : \"2023-08-25\", \"endTime\" : \"2023-08-25\", \"creationTime\" : \"2023-08-25\", \"lastUpdateTime\" : \"2023-08-25\" }, { \"reservationId\" : 11111, \"orderId\" : 22222, \"startTime\" : \"2023-08-25\", \"endTime\" : \"2023-08-25\", \"creationTime\" : \"2023-08-25\", \"lastUpdateTime\" : \"2023-08-25\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/security/token : Get Bearer Token
     * Use Your Login Information To Get A Bearer Token.
     *
     * @param login Payment information that needs to be created. (required)
     * @return Successful Operation. (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "getToken",
        summary = "Get Bearer Token",
        description = "Use Your Login Information To Get A Bearer Token.",
        tags = { "Security" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/security/token",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> getToken(
        @Parameter(name = "Login", description = "Payment information that needs to be created.", required = true) @Valid @RequestBody Login login
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/payments/{paymentId}/refund : Refund A Payment
     * Refund a payment.
     *
     * @param paymentId ID of the payment (required)
     * @return Successful Operation. (status code 200)
     *         or Bad Request Body. (status code 400)
     *         or Access token Is Missing Or Invalid. (status code 401)
     *         or Not Enough Permissions To Perform This Action. (status code 403)
     *         or The Server Cannot Find The Requested Resource. (status code 404)
     *         or The Server Has Encountered a Situation It  Does Not Know How To Handle. (status code 500)
     */
    @Operation(
        operationId = "refundPayment",
        summary = "Refund A Payment",
        description = "Refund a payment.",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Operation."),
            @ApiResponse(responseCode = "400", description = "Bad Request Body."),
            @ApiResponse(responseCode = "401", description = "Access token Is Missing Or Invalid."),
            @ApiResponse(responseCode = "403", description = "Not Enough Permissions To Perform This Action."),
            @ApiResponse(responseCode = "404", description = "The Server Cannot Find The Requested Resource."),
            @ApiResponse(responseCode = "500", description = "The Server Has Encountered a Situation It  Does Not Know How To Handle.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/payments/{paymentId}/refund"
    )
    
    default ResponseEntity<Void> refundPayment(
        @Parameter(name = "paymentId", description = "ID of the payment", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") Long paymentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
